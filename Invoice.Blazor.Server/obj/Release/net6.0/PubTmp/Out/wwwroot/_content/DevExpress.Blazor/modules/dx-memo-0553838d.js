import{_ as t}from"./_tslib-6e8ca86b.js";import{b as e}from"./text-editor-1137e11e.js";import{f as s}from"./constants-4c28185b.js";import{n as i}from"./custom-element-bd7061f2.js";import"./dx-ui-element-de378e9d.js";import"./logicaltreehelper-15991dcb.js";import"./layouthelper-4b19d191.js";import"./rect-7fc5c2ef.js";import"./point-9c6ab88a.js";import"./lit-element-base-af247167.js";import"./data-qa-utils-8be7c726.js";import"./lit-element-b0a6fcba.js";import"./css-classes-f3f8ed66.js";import"./custom-events-helper-18f7786a.js";import"./property-d3853089.js";let r=class extends e{constructor(){super(),this.textAreaObserver=new MutationObserver(this.textAreaSizeChanged.bind(this))}onSlotChanged(t){super.onSlotChanged(t);const e=this.getFieldElement();this.textAreaObserver.observe(e,{attributes:!0})}disconnectedCallback(){this.textAreaObserver.disconnect(),super.disconnectedCallback()}textAreaSizeChanged(t,e){const s=t[0].target,i=parseInt(s.style.width);if(!isNaN(i)){const t=this.offsetWidth-this.clientWidth+i;this.offsetWidth!==t&&(this.style.width=t+"px")}const r=parseInt(s.style.height);if(!isNaN(r)){const t=this.offsetHeight-this.clientHeight+r;this.offsetHeight!==t&&(this.style.height=t+"px")}}get shouldForceInputOnEnter(){return!1}getFieldElement(){return this.querySelector("textarea")}};r=t([i(s)],r);const o={loadModule:function(){}};export{o as default};
